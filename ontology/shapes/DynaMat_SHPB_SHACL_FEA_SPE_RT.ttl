@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dynamat: <https://github.com/UTEP-Dynamic-Materials-Lab/SHPB_Toolkit/tree/main/ontology#> .

######################################
### EXPERIMENT INSTANCE SHAPE
######################################

dynamat:Experiment_Shape a sh:NodeShape ;
    sh:targetClass dynamat:SHPBExperiment ;

    # Requires Metadata
    sh:property [
        sh:path dynamat:hasMetadata ;
        #sh:class dynamat:Metadata ;                
        sh:node dynamat:Metadata_Shape; # Calls the Laboratory Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each experiment entry must have a valid metadata assignment." ;
    ] ;

    # Requires Primary Data
    sh:property [
        sh:path dynamat:hasPrimaryData ;
        #sh:class dynamat:PrimaryData ;                
        sh:node dynamat:Primary_Data_Shape; # Calls the Laboratory Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each experiment entry must have a valid primary data assignment." ;
    ] ;

    # Requires Secondary Data
    sh:property [
        sh:path dynamat:hasSecondaryData ;
        #sh:class dynamat:SecondaryData ;                
        #sh:node dynamat:Metadata_Shape; # Calls the Laboratory Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each experiment entry must have a valid secondary data assignment." ;
    ] .

######################################
### METADATA CONSTRAINT SHAPE
######################################

dynamat:Metadata_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Metadata ;

    # Requires Laboratory Assignment
    sh:property [
        sh:path dynamat:hasLaboratory ;               
        sh:node dynamat:Laboratory_Shape; # Calls the Laboratory Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each test must have a valid laboratory assignment." ;
    ] ;

    # Requires Test Date 
    sh:property [
        sh:path dynamat:hasTestDate ;
        sh:datatype xsd:date ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each test must include a valid test date in the format YYYY-MM-DD." ;
    ] ;

    # Requires Test Name 
    sh:property [
        sh:path dynamat:hasTestName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each test must have a unique name as a string." ;
    ] ;

    # Requires Testing Conditions
    sh:property [
        sh:path dynamat:hasTestingConditions ;
        sh:node dynamat:Testing_Conditions_Shape; # Calls the Testing Conditions Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each test must have specified and valid Testing Conditions." ;
    ] ;

    # Requires User
    sh:property [
        sh:path dynamat:hasUser ;
        #sh:class dynamat:User ;
        sh:node dynamat:User_Shape; # Calls the User Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each test must have a user assigned." ;
    ] .

######################################
### Laboratory Shape
######################################

dynamat:Laboratory_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Laboratory ;

    # Validate Abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The laboratory must have an abbreviation as a single string value." ;
    ] ;

    # Validate Affiliation
    sh:property [
        sh:path dynamat:hasAffiliation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The laboratory must have an affiliation as a single string value." ;
    ] ;

    # Validate Location
    sh:property [
        sh:path dynamat:hasLocation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The laboratory must have a location as a single string value." ;
    ] ;

    # Validate Name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The laboratory must have a name as a single string value." ;
    ] ;

    # Validate Supervisor
    sh:property [
        sh:path dynamat:hasSupervisor ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "If specified, the laboratory must have a supervisor as a single string value." ;
    ] .

######################################
### USER SHAPE
######################################

dynamat:User_Shape a sh:NodeShape ;
    sh:targetClass dynamat:User ;

    # Validate Abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each user must have a single abbreviation as a string." ;
    ] ;

    # Validate Affiliation
    sh:property [
        sh:path dynamat:hasAffiliation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each user must have a single affiliation as a string." ;
    ] ;

    # Validate Location
    sh:property [
        sh:path dynamat:hasLocation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each user must have a single location as a string." ;
    ] ;

    # Validate Name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each user must have a single name as a string." ;
    ] ;

    # Validate Supervisor
    sh:property [
        sh:path dynamat:hasSupervisor ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;        
        sh:message "If specified, each user must have a single supervisor as a string." ;
    ] .

##############################################
### TESTING CONDITIONS SHAPE
##############################################

dynamat:Testing_Conditions_Shape a sh:NodeShape ;
    sh:targetClass dynamat:TestingConditions ;

    # Ensure Incident Bar is defined
    sh:property [
        sh:path dynamat:hasBar ;
        sh:node dynamat:Bar_Instance_Shape ; # Calls the Bar Instance Shape to be applied
        sh:minCount 3 ;
        sh:maxCount 3 ;
        sh:message "Testing conditions must include exactly three bars." ;
    ] ;

    # Ensure Momentum Trap Condition is defined
    sh:property [
        sh:path dynamat:hasMomentumTrapCondition ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Testing conditions must specify a momentum trap condition." ;
    ] ;

    # Ensure Test Mode is defined
    sh:property [
        sh:path dynamat:hasTestMode ;
        sh:hasValue dynamat:FEAMode ; # Specifies the entry for FEA Mode
        sh:node dynamat:FEA_Specimen_Shape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Testing conditions must specify the test mode == FEA Mode." ;
    ] ;

    # Ensure Test Temperature is defined
    sh:property [
        sh:path dynamat:hasTestTemperature ;
        sh:hasValue dynamat:RoomTemperature ; # Specifies the entry for Room Temperature Mode
        sh:node dynamat:RoomTemperature_Shape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Testing conditions must specify the test temperature == Room Temperature." ;
    ] ;

     # Ensure Test Type is defined
    sh:property [
        sh:path dynamat:hasTestType ;
        sh:hasValue dynamat:SpecimenTest ;
        sh:node dynamat:SpecimenTest_Shape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Testing conditions must specify the test == Specimen Test." ;
    ] .

######################################
### TEST TYPE SHAPE
######################################

dynamat:SpecimenTest_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Metadata ;
    
    # Requires Specimen Instance
    sh:property [
        sh:path dynamat:hasSpecimen ;                               
        sh:node dynamat:SHPBSpecimen_Shape; # Calls the Specimen Shape to be applied
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "Test metadata entry must contain a valid entry for SHPBSpecimen." ;
    ] .   

######################################
### SPECIMEN SHAPE
######################################

dynamat:SHPBSpecimen_Shape a sh:NodeShape ;
    sh:targetClass dynamat:SHPBSpecimen ;

    # Validate Dimensions
    sh:property [
        sh:path dynamat:hasDimension ;
        sh:node dynamat:Dimension_Property_Shape ;
        sh:minCount 4 ;
        sh:message "The specimen must have at least four dimensions: original and deformed cross sections and lengths." ;
    ] ;

    # Validate Material
    sh:property [
        sh:path dynamat:hasMaterial ;
        sh:node dynamat:Material_Shape ; # Calls the Material Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The specimen must have exactly one material assigned." ;
    ] ;

    # Validate Material Processing
    sh:property [
        sh:path dynamat:hasMaterialProcessing ;
        sh:node dynamat:Class_instance_shape ;  # Calls the Class Intance Shape to be applied
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "The specimen must have exactly one material processing method defined." ;
    ] ;

    # Validate Shape
    sh:property [
        sh:path dynamat:hasShape ;
        sh:node dynamat:Class_instance_shape ;  # Calls the Class Intance Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The specimen must have exactly one shape defined." ;
    ] ;

    # Validate Structure
    sh:property [
        sh:path dynamat:hasStructure ;
        sh:node dynamat:Class_instance_shape ; # Calls the Class Intance Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The specimen must have exactly one structure defined." ;
    ] .

######################################
### MATERIAL SHAPE
######################################

dynamat:Material_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Material ;

    # Validate Comment
    sh:property [
        sh:path rdfs:comment ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ; 
        sh:message "If specified, each material must have a descriptive comment as a string." ;
    ] ;

    # Validate Abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each material must have a single abbreviation as a string." ;
    ] ;

    # Validate Legend Name
    sh:property [
        sh:path dynamat:hasLegendName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each material must have a single legend name as a string." ;
    ] ;

    # Validate Name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each material must have a single name as a string." ;
    ] .

##############################################
### BAR INSTANCE SHAPE 
##############################################

dynamat:Bar_Instance_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Bar ;

    # Ensure Cross Section, and Lenght dimensions are defined  
    sh:property [
        sh:path dynamat:hasDimension ;
        sh:node dynamat:Dimension_Property_Shape ; 
        sh:minCount 2 ;
        sh:message "The bar must have two dimensions: CrossSectionalArea, Length." ;
    ] ;

    sh:property [
        sh:path dynamat:hasMaterial ;
        sh:node dynamat:Material_Shape ; # Calls the Material Shape to be applied
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The bar must have an assigned valid material." ;
    ] ;
    
    sh:property [
        sh:path dynamat:hasMechanicalProperty ;
        sh:node dynamat:Dimension_Property_Shape ; 
        sh:minCount 4 ;
        sh:message "The bar must have at least four mechanical properties including: Density, Elastic Modulus, Poisson's Ratio, and WaveSpeed." ;
    ] ;

    sh:property [
        sh:path dynamat:hasStrainGauge ;
        sh:node dynamat:StrainGauge_Shape ;
        sh:minCount 0 ;
        sh:message "If specified, the bar must have at least one strain gauge." ;
    ] .

##############################################
### DIMENSION / PROPERTY SHAPE 
##############################################

dynamat:Dimension_Property_Shape a sh:NodeShape ;
    sh:or (
        [ sh:targetClass dynamat:Dimension ]
        [ sh:targetClass dynamat:MechanicalProperty ]
        
    ) ;

    # Validate Description
    sh:property [
        sh:path dynamat:hasDescription ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "If specified, each dimension must have a description as a single string." ;
    ] ;

    # Validate Units
    sh:property [
        sh:path dynamat:hasUnits ;
        #sh:class dynamat:Unit ;
        sh:node dynamat:Unit_Shape ; 
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each dimension must have a valid unit assigned." ;
    ] ;

    # Validate Value
    sh:property [
        sh:path dynamat:hasValue ;
        sh:datatype xsd:float ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each dimension must have a value as a single float." ;
    ] .

##############################################
### UNITS SHAPE 
##############################################

dynamat:Unit_Shape a sh:NodeShape ;
    sh:targetClass dynamat:Unit ;

    # Validate Abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each unit must have a single abbreviation as a string." ;
    ] ;

    # Validate Symbol
    sh:property [
        sh:path dynamat:hasSymbol ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each unit must have a single symbol as a string." ;
    ] .

##############################################
### CLASS INSTANCE SHAPE
##############################################

dynamat:Class_instance_Shape a sh:NodeShape ;
    sh:or (
        [ sh:targetClass dynamat:Shape ]
        [ sh:targetClass dynamat:Structure ]
    ) ;

    # Validate Abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each structure must have a single abbreviation as a string." ;
    ] ;

    # Validate Name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each structure must have a single name as a string." ;
    ] .

##############################################
### STRAIN GAUGE SHAPE
##############################################

dynamat:StrainGauge_Shape a sh:NodeShape ;
    sh:targetClass dynamat:StrainGauge ;

    # Ensure the strain gauge has a valid abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "If defined, the strain gauge must have a valid abbreviation (e.g., 'SG')." ;
    ] ;

    # Ensure the strain gauge has a valid name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "If defined, the strain gauge must have a valid name (e.g., 'Strain Gauge for Split Hopkinson Pressure Bar Testing')." ;
    ] ;

    # Ensure the strain gauge has at least one dimension
    sh:property [
        sh:path dynamat:hasDimension ;
        sh:node dynamat:Dimension_Shape ;
        sh:minCount 1 ;
        sh:message "The strain gauge must have the dimension StrainGaugeDistance)." ;
    ] .

##############################################
### FEA Mode Shape
##############################################

dynamat:FEA_Specimen_Shape a sh:NodeShape ;
    sh:targetClass dynamat:SHPBSpecimen ;

    # Ensure Specimen contains FEMetadata
    sh:property [
        sh:path dynamat:hasFEAMetadata ;
        sh:node dynamat:FEAMetadata_Shape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "The specimen must include FEMetadata for FEA mode." ;
        ] .

##############################################
### FEA METADATA SHAPE
##############################################

dynamat:FEAMetadata_Shape a sh:NodeShape ;
    sh:targetClass dynamat:FEAMetadata ;

    # Ensure at least one StrengthModel is defined
    sh:property [
        sh:path dynamat:hasStrengthModel ;
        sh:node dynamat:StrengthModel_Shape ;
        sh:minCount 0 ;
        sh:message "FEMetadata entry must only include one StrengthModel." ;
    ] .

##############################################
### STRENGTH MODEL SHAPE
##############################################

dynamat:StrengthModel_Shape a sh:NodeShape ;
    sh:targetClass dynamat:StrengthModel ;

    # Ensure the strength model has a valid name
    sh:property [
        sh:path dynamat:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:message "If defined, the strenght model must have a valid name (e.g., 'Johnson-Cook Simplified Model')." ;
    ] ;

    # Ensure the strength model has a valid abbreviation
    sh:property [
        sh:path dynamat:hasAbbreviation ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;        
        sh:message "If defined, the strenght model must have a valid abbreviation (e.g., 'JC Model')." ;
    ] ;

    # Ensure Strength Model parameters are defined
    sh:property [
        sh:path dynamat:hasParameter ;
        sh:node dynamat:Dimension_Property_Shape ;     
        sh:minCount 1 ;
        sh:message "FEA Strength Model must include at least one mechanical parameter." ;
    ] .

##############################################
### ROOM TEMPERATURE SHAPE
##############################################

dynamat:RoomTemperature_Shape a sh:NodeShape ;
    sh:targetClass dynamat:PrimaryData ;

    sh:property [
        sh:path dynamat:hasSensorSignal ;
        sh:node dynamat:Signal_Shape ; 
        sh:minCount 3 ;
        sh:message "PrimaryData must include at least three sensor signals." ;
    ] .

##############################################
### SIGNAL SHAPE
##############################################

dynamat:Signal_Shape a sh:NodeShape ;
    sh:targetClass dynamat:SensorSignal ;

    # Ensure Description is defined
    sh:property [
        sh:path dynamat:hasDescription ;
        sh:datatype xsd:string ;
        sh:minCount 0 ;
        sh:maxCount 1 ;        
        sh:message "If specified, each signal must have a description." ;
    ] ;

    # Ensure Encoded Data is defined
    sh:property [
        sh:path dynamat:hasEncodedData ;
        sh:datatype xsd:base64Binary ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each signal must include encoded data." ;
    ] ;

    # Ensure Encoding is defined
    sh:property [
        sh:path dynamat:hasEncoding ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each signal must specify its encoding format (e.g., base64)." ;
    ] ;

    # Ensure Legend Name is defined
    sh:property [
        sh:path dynamat:hasLegendName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each signal must have a legend name for plotting purposes." ;
    ] ;

    # Ensure Size is defined
    sh:property [
        sh:path dynamat:hasSize ;
        sh:datatype xsd:int ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each signal must specify its size (e.g., number of data points)." ;
    ] ;

    # Ensure Units are defined
    sh:property [
        sh:path dynamat:hasUnits ;
        sh:node dynamat:Unit_Shape ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Each signal must specify valid units." ;
    ] .